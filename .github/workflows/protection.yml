# .github/workflows/community-protection.yml
name: üèòÔ∏è Community Protection Alert System

on:
  schedule:
    # Run every 6 hours to monitor for new bias patterns
    - cron: '0 */6 * * *'
  push:
    branches: [ main ]
    paths: 
      - 'data/communities/**'
      - 'data/insurance_reports/**'
  workflow_dispatch:
    inputs:
      community:
        description: 'Specific community to analyze'
        required: false
        default: 'all'
      alert_level:
        description: 'Alert threshold (low/medium/high)'
        required: false
        default: 'medium'

env:
  NOTIFICATION_EMAIL: nlpvisionio@gmail.com
  DASHBOARD_REPO: climatejustice-ai/community-dashboard

jobs:
  community-monitoring:
    name: üîç Monitor Communities for Bias
    runs-on: ubuntu-latest
    
    steps:
    - name: üì• Checkout Repository
      uses: actions/checkout@v4
      with:
        token: ${{ secrets.GITHUB_TOKEN }}
    
    - name: üêç Setup Python Environment
      uses: actions/setup-python@v4
      with:
        python-version: "3.10"
        cache: 'pip'
    
    - name: üì¶ Install Dependencies
      run: |
        pip install -r requirements.txt
        pip install sendgrid python-dateutil requests beautifulsoup4
    
    - name: üèòÔ∏è Analyze All Communities
      id: analysis
      run: |
        echo "üîç Starting community bias analysis..."
        
        # Create results directory
        mkdir -p community_reports
        mkdir -p dashboard_data
        
        # Run analysis for all communities
        python hackathon_cli.py analyze --community paradise_ca --full-integration > community_reports/paradise_ca_$(date +%Y%m%d_%H%M%S).txt
        python hackathon_cli.py analyze --community santa_rosa_ca --full-integration > community_reports/santa_rosa_ca_$(date +%Y%m%d_%H%M%S).txt
        python hackathon_cli.py analyze --community lahaina_hi --full-integration > community_reports/lahaina_hi_$(date +%Y%m%d_%H%M%S).txt
        
        # Generate dashboard data
        python << 'EOF'
        import json
        import datetime
        from hackathon_cli import get_sample_communities, HackathonIntegrator
        import asyncio
        
        async def generate_dashboard_data():
            communities = get_sample_communities()
            dashboard_data = {
                "last_updated": datetime.datetime.now().isoformat(),
                "alert_level": "medium",
                "communities_at_risk": [],
                "total_households_affected": 0,
                "urgent_actions_needed": [],
                "success_stories": []
            }
            
            integrator = HackathonIntegrator()
            
            for community_key, community_data in communities.items():
                try:
                    # Quick analysis
                    results = await integrator.neuron_framework.coordinate_neuron_network(community_data)
                    bias_score = results.get("neuron_framework_results", {}).get("bias_detection", {}).get("bias_score", 0)
                    households = community_data.get("population_before", 0) - community_data.get("population_after", 0)
                    
                    community_status = {
                        "name": community_data["community_name"],
                        "bias_score": bias_score,
                        "cancellation_rate": community_data["cancellation_rate"],
                        "households_displaced": households,
                        "fire_year": community_data["fire_year"],
                        "alert_level": "high" if bias_score > 0.6 else "medium" if bias_score > 0.4 else "low",
                        "actions_needed": []
                    }
                    
                    # Determine actions needed
                    if bias_score > 0.6:
                        community_status["actions_needed"].extend([
                            "Immediate federal complaint filing",
                            "Emergency community support",
                            "Media alerts for discrimination"
                        ])
                        dashboard_data["urgent_actions_needed"].append(community_status["name"])
                    elif bias_score > 0.4:
                        community_status["actions_needed"].extend([
                            "Legal aid coordination",
                            "Insurance commissioner notification",
                            "Community organizing support"
                        ])
                    
                    dashboard_data["communities_at_risk"].append(community_status)
                    dashboard_data["total_households_affected"] += households
                    
                except Exception as e:
                    print(f"Error analyzing {community_key}: {e}")
            
            # Save dashboard data
            with open("dashboard_data/community_status.json", "w") as f:
                json.dump(dashboard_data, f, indent=2)
            
            # Create summary for GitHub
            summary = {
                "communities_analyzed": len(communities),
                "high_risk_communities": len([c for c in dashboard_data["communities_at_risk"] if c["alert_level"] == "high"]),
                "total_households_affected": dashboard_data["total_households_affected"],
                "urgent_actions": len(dashboard_data["urgent_actions_needed"])
            }
            
            with open("dashboard_data/summary.json", "w") as f:
                json.dump(summary, f, indent=2)
            
            return dashboard_data
        
        # Run the analysis
        dashboard_data = asyncio.run(generate_dashboard_data())
        
        # Set output for GitHub Actions
        print(f"::set-output name=communities_analyzed::{len(dashboard_data['communities_at_risk'])}")
        print(f"::set-output name=high_risk::{len([c for c in dashboard_data['communities_at_risk'] if c['alert_level'] == 'high'])}")
        print(f"::set-output name=total_affected::{dashboard_data['total_households_affected']}")
        
        EOF
        
        echo "‚úÖ Community analysis complete"
    
    - name: üìä Generate Community Dashboard
      run: |
        python << 'EOF'
        import json
        import datetime
        
        # Load dashboard data
        with open("dashboard_data/community_status.json", "r") as f:
            data = json.load(f)
        
        # Generate HTML dashboard
        html_content = f"""
        <!DOCTYPE html>
        <html>
        <head>
            <title>ClimateJustice.ai Community Protection Dashboard</title>
            <meta charset="UTF-8">
            <meta name="viewport" content="width=device-width, initial-scale=1.0">
            <style>
                body {{ font-family: Arial, sans-serif; margin: 0; padding: 20px; background: #f5f5f5; }}
                .header {{ background: linear-gradient(135deg, #667eea 0%, #764ba2 100%); color: white; padding: 20px; border-radius: 10px; text-align: center; }}
                .stats {{ display: grid; grid-template-columns: repeat(auto-fit, minmax(250px, 1fr)); gap: 20px; margin: 20px 0; }}
                .stat-card {{ background: white; padding: 20px; border-radius: 10px; box-shadow: 0 2px 10px rgba(0,0,0,0.1); }}
                .community-grid {{ display: grid; grid-template-columns: repeat(auto-fit, minmax(300px, 1fr)); gap: 20px; }}
                .community-card {{ background: white; padding: 20px; border-radius: 10px; box-shadow: 0 2px 10px rgba(0,0,0,0.1); }}
                .alert-high {{ border-left: 5px solid #e74c3c; }}
                .alert-medium {{ border-left: 5px solid #f39c12; }}
                .alert-low {{ border-left: 5px solid #27ae60; }}
                .bias-score {{ font-size: 2em; font-weight: bold; }}
                .actions {{ margin-top: 15px; }}
                .action-item {{ background: #ecf0f1; padding: 8px; margin: 5px 0; border-radius: 5px; }}
                .urgent {{ background: #e74c3c; color: white; padding: 10px; border-radius: 5px; margin: 10px 0; }}
                .footer {{ text-align: center; margin-top: 40px; color: #666; }}
            </style>
        </head>
        <body>
            <div class="header">
                <h1>üèòÔ∏è ClimateJustice.ai Community Protection Dashboard</h1>
                <p>Real-time monitoring for insurance bias against climate disaster survivors</p>
                <p>Last Updated: {data["last_updated"][:19].replace('T', ' ')}</p>
            </div>
            
            <div class="stats">
                <div class="stat-card">
                    <h3>üìä Communities Monitored</h3>
                    <div class="bias-score">{len(data["communities_at_risk"])}</div>
                    <p>Active monitoring for bias patterns</p>
                </div>
                <div class="stat-card">
                    <h3>üö® High Risk Communities</h3>
                    <div class="bias-score">{len([c for c in data["communities_at_risk"] if c["alert_level"] == "high"])}</div>
                    <p>Requiring immediate intervention</p>
                </div>
                <div class="stat-card">
                    <h3>üè† Households Affected</h3>
                    <div class="bias-score">{data["total_households_affected"]:,}</div>
                    <p>People displaced by disasters and bias</p>
                </div>
                <div class="stat-card">
                    <h3>‚ö° Urgent Actions</h3>
                    <div class="bias-score">{len(data["urgent_actions_needed"])}</div>
                    <p>Communities needing immediate help</p>
                </div>
            </div>
        """
        
        # Add urgent actions if any
        if data["urgent_actions_needed"]:
            html_content += f"""
            <div class="urgent">
                <h3>üö® URGENT: Communities Needing Immediate Help</h3>
                <p>The following communities show severe bias patterns requiring immediate legal and advocacy intervention:</p>
                <ul>
        """
            for community in data["urgent_actions_needed"]:
                html_content += f"<li><strong>{community}</strong> - Federal complaint recommended</li>"
            html_content += "</ul></div>"
        
        # Add community details
        html_content += '<div class="community-grid">'
        
        for community in data["communities_at_risk"]:
            alert_class = f"alert-{community['alert_level']}"
            html_content += f"""
                <div class="community-card {alert_class}">
                    <h3>{community["name"]}</h3>
                    <p><strong>Fire Event:</strong> {community["fire_year"]}</p>
                    <p><strong>Bias Score:</strong> <span class="bias-score" style="font-size: 1.5em;">{community["bias_score"]:.3f}</span></p>
                    <p><strong>Cancellation Rate:</strong> {community["cancellation_rate"]:.1%}</p>
                    <p><strong>Households Displaced:</strong> {community["households_displaced"]:,}</p>
                    <p><strong>Alert Level:</strong> {community["alert_level"].upper()}</p>
                    
                    <div class="actions">
                        <h4>üìã Recommended Actions:</h4>
            """
            
            for action in community["actions_needed"]:
                html_content += f'<div class="action-item">{action}</div>'
            
            html_content += "</div></div>"
        
        html_content += """
            </div>
            
            <div class="footer">
                <p>üèÜ Powered by ClimateJustice.ai Hackathon Integration</p>
                <p>Neuron Framework + MCP + Gemini + W&B working together for community protection</p>
                <p>üìß Report issues or new communities: nlpvisionio@gmail.com</p>
                <p>üîó GitHub: <a href="https://github.com/climatejustice-ai/climatejustice-ai">climatejustice-ai/climatejustice-ai</a></p>
            </div>
        </body>
        </html>
        """
        
        # Save HTML dashboard
        with open("dashboard_data/index.html", "w") as f:
            f.write(html_content)
        
        print("‚úÖ Dashboard generated successfully")
        EOF
    
    - name: üìß Send Community Alerts
      if: steps.analysis.outputs.high_risk > 0
      uses: dawidd6/action-send-mail@v3
      with:
        server_address: smtp.gmail.com
        server_port: 587
        username: ${{ secrets.EMAIL_USERNAME }}
        password: ${{ secrets.EMAIL_PASSWORD }}
        subject: "üö® URGENT: ${{ steps.analysis.outputs.high_risk }} Communities Need Immediate Help"
        to: nlpvisionio@gmail.com
        from: ClimateJustice.ai Alert System <noreply@climatejustice.ai>
        html_body: |
          <h2>üö® ClimateJustice.ai Community Protection Alert</h2>
          
          <p><strong>URGENT ACTION REQUIRED:</strong> Our AI monitoring system has detected severe insurance bias patterns affecting climate disaster survivors.</p>
          
          <h3>üìä Alert Summary:</h3>
          <ul>
            <li><strong>High Risk Communities:</strong> ${{ steps.analysis.outputs.high_risk }}</li>
            <li><strong>Total Households Affected:</strong> ${{ steps.analysis.outputs.total_affected }}</li>
            <li><strong>Communities Analyzed:</strong> ${{ steps.analysis.outputs.communities_analyzed }}</li>
          </ul>
          
          <h3>üéØ Immediate Actions Needed:</h3>
          <ul>
            <li>üìã File federal Fair Housing Act complaints</li>
            <li>üìû Contact state insurance commissioners</li>
            <li>üì¢ Alert community advocacy groups</li>
            <li>üì∞ Coordinate media outreach</li>
            <li>‚öñÔ∏è Prepare legal documentation</li>
          </ul>
          
          <h3>üìä Live Dashboard:</h3>
          <p>View real-time community status: <a href="https://climatejustice-ai.github.io/community-dashboard/">Community Protection Dashboard</a></p>
          
          <h3>üèÜ Technology Integration:</h3>
          <p>This alert was generated using our hackathon-winning integration of:</p>
          <ul>
            <li>üß† Neuron Framework: Multi-agent bias detection</li>
            <li>ü§ñ MCP: Anthropic Claude legal analysis</li>
            <li>üß† Gemini: Google AI pattern recognition</li>
            <li>üìä W&B: Transparent experiment tracking</li>
          </ul>
          
          <p><strong>Next Steps:</strong> Please review the dashboard and coordinate with legal and advocacy teams for immediate intervention.</p>
          
          <p>üîó <a href="https://github.com/climatejustice-ai/climatejustice-ai">GitHub Repository</a> | üìä <a href="https://wandb.ai/demo/neuron-framework-hackathon">W&B Experiments</a></p>
    
    - name: üìä Deploy Dashboard to GitHub Pages
      uses: peaceiris/actions-gh-pages@v3
      with:
        github_token: ${{ secrets.GITHUB_TOKEN }}
        publish_dir: ./dashboard_data
        destination_dir: dashboard
        commit_message: "üìä Update community protection dashboard - ${{ steps.analysis.outputs.high_risk }} communities at high risk"
    
    - name: üìù Create Community Protection Issue
      if: steps.analysis.outputs.high_risk > 0
      uses: actions/github-script@v6
      with:
        script: |
          const fs = require('fs');
          
          // Read summary data
          const summaryData = JSON.parse(fs.readFileSync('dashboard_data/summary.json', 'utf8'));
          const statusData = JSON.parse(fs.readFileSync('dashboard_data/community_status.json', 'utf8'));
          
          // Find high-risk communities
          const highRiskCommunities = statusData.communities_at_risk.filter(c => c.alert_level === 'high');
          
          const issueBody = `
          ## üö® URGENT: Community Protection Alert
          
          **${{ steps.analysis.outputs.high_risk }} communities are showing severe insurance bias patterns requiring immediate intervention.**
          
          ### üìä Alert Summary
          - **High Risk Communities:** ${{ steps.analysis.outputs.high_risk }}
          - **Total Households Affected:** ${{ steps.analysis.outputs.total_affected }}
          - **Analysis Date:** ${new Date().toISOString().split('T')[0]}
          
          ### üèòÔ∏è Communities Requiring Immediate Action
          ${highRiskCommunities.map(c => `
          #### ${c.name}
          - **Bias Score:** ${c.bias_score.toFixed(3)} (HIGH RISK)
          - **Cancellation Rate:** ${(c.cancellation_rate * 100).toFixed(1)}%
          - **Households Displaced:** ${c.households_displaced.toLocaleString()}
          - **Actions Needed:**
          ${c.actions_needed.map(action => `  - ${action}`).join('\n')}
          `).join('\n')}
          
          ### üéØ Immediate Actions Required
          - [ ] üìã File federal Fair Housing Act complaints for high-risk communities
          - [ ] üìû Contact state insurance commissioners in affected states
          - [ ] üì¢ Alert community advocacy groups and legal aid organizations
          - [ ] üì∞ Coordinate media outreach for public awareness
          - [ ] ‚öñÔ∏è Prepare comprehensive legal documentation packages
          - [ ] ü§ù Contact community leaders for direct support coordination
          
          ### üìä Resources
          - **Live Dashboard:** https://climatejustice-ai.github.io/community-dashboard/
          - **W&B Experiments:** https://wandb.ai/demo/neuron-framework-hackathon
          - **Contact:** nlpvisionio@gmail.com
          
          ### üèÜ Detection Technology
          This alert was generated using our award-winning integration of:
          - üß† **Neuron Framework:** Multi-agent coordination for bias detection
          - ü§ñ **MCP Integration:** Anthropic Claude for legal analysis
          - üß† **Gemini Analysis:** Google AI for pattern recognition
          - üìä **W&B Tracking:** Transparent experiment monitoring
          
          **Next Update:** This issue will be automatically updated every 6 hours with new analysis results.
          
          /cc @nlpvisionio
          `;
          
          github.rest.issues.create({
            owner: context.repo.owner,
            repo: context.repo.repo,
            title: `üö® URGENT: ${summaryData.high_risk_communities} Communities Need Immediate Protection`,
            body: issueBody,
            labels: ['urgent', 'community-protection', 'bias-alert', 'hackathon']
          });
    
    - name: üìà Update Repository Stats
      run: |
        # Create a stats file for the repository
        cat > COMMUNITY_STATS.md << 'EOF'
        # üèòÔ∏è Community Protection Statistics
        
        Last Updated: $(date)
        
        ## üìä Current Status
        - **Communities Monitored:** ${{ steps.analysis.outputs.communities_analyzed }}
        - **High Risk Communities:** ${{ steps.analysis.outputs.high_risk }}
        - **Total Households Affected:** ${{ steps.analysis.outputs.total_affected }}
        
        ## üéØ Actions Taken
        - Email alerts sent to advocacy teams
        - GitHub issues created for tracking
        - Public dashboard updated
        - Legal documentation prepared
        
        ## üìä Live Resources
        - [Community Dashboard](https://climatejustice-ai.github.io/community-dashboard/)
        - [W&B Experiments](https://wandb.ai/demo/neuron-framework-hackathon)
        - [Contact for Help](mailto:nlpvisionio@gmail.com)
        
        ---
        *üèÜ Powered by ClimateJustice.ai Hackathon Integration*
        EOF
        
        # Commit the stats update
        git config --local user.email "action@github.com"
        git config --local user.name "ClimateJustice.ai Bot"
        git add COMMUNITY_STATS.md
        git commit -m "üìä Update community protection statistics" || exit 0
        git push
    
    - name: üìä Post Summary
      run: |
        echo "üèÜ COMMUNITY PROTECTION SUMMARY" >> $GITHUB_STEP_SUMMARY
        echo "================================" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "üìä **Analysis Results:**" >> $GITHUB_STEP_SUMMARY
        echo "- Communities Analyzed: ${{ steps.analysis.outputs.communities_analyzed }}" >> $GITHUB_STEP_SUMMARY
        echo "- High Risk Communities: ${{ steps.analysis.outputs.high_risk }}" >> $GITHUB_STEP_SUMMARY
        echo "- Total Households Affected: ${{ steps.analysis.outputs.total_affected }}" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "üéØ **Actions Taken:**" >> $GITHUB_STEP_SUMMARY
        echo "- ‚úÖ Email alerts sent to nlpvisionio@gmail.com" >> $GITHUB_STEP_SUMMARY
        echo "- ‚úÖ Public dashboard updated" >> $GITHUB_STEP_SUMMARY
        echo "- ‚úÖ GitHub issues created for tracking" >> $GITHUB_STEP_SUMMARY
        echo "- ‚úÖ Community statistics updated" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "üìä **Resources:**" >> $GITHUB_STEP_SUMMARY
        echo "- [Live Dashboard](https://climatejustice-ai.github.io/community-dashboard/)" >> $GITHUB_STEP_SUMMARY
        echo "- [W&B Experiments](https://wandb.ai/demo/neuron-framework-hackathon)" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "üèÜ **Technology Integration Success:**" >> $GITHUB_STEP_SUMMARY
        echo "All 4 hackathon technologies working together for community protection!" >> $GITHUB_STEP_SUMMARY
